{"version":3,"sources":["components/Idea.js","components/IdeaForm.js","components/IdeasContainer.js","App.js","serviceWorker.js","index.js"],"names":["Idea","handleClick","_this","props","onClick","idea","id","handleDelete","onDelete","react_default","a","createElement","this","className","title","body","React","Component","IdeaForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","_this$props$sub$send","_this$props$sub$send2","resetNotification","setState","defineProperty","target","name","value","sub","send","state","handleBlur","axios","put","concat","then","response","console","log","updateIdea","data","catch","error","onBlur","type","placeholder","ref","titleRef","onChange","IdeasContainer","addNewIdea","post","ideas","update","$splice","editingIdeaId","ideaIndex","findIndex","x","$set","notification","enableEditing","focus","deleteIdea","delete","getIdea","get","handleReceive","message","handleReceiveNewText","_ref","text","cable","ActionCable","createConsumer","subscriptions","create","received","_this2","map","components_IdeaForm","key","input","components_Idea","App","components_IdeasContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b9682b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nclass Idea extends React.Component {\r\n    handleClick = () => {\r\n        this.props.onClick(this.props.idea.id);\r\n    }\r\n\r\n    handleDelete = () => {\r\n        this.props.onDelete(this.props.idea.id)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onClick={this.handleClick} className=\"tile\">\r\n                <span className=\"deleteButton\" onClick={this.handleDelete}>\r\n                    X\r\n                </span>\r\n                <h4 onClick={this.handleClick}>{this.props.idea.title}</h4>\r\n                <p onClick={this.handleClick}>{this.props.idea.body}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Idea;","import React from 'react';\r\nimport axios from 'axios';\r\nimport '../App.css';\r\n\r\nclass IdeaForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: this.props.idea.title,\r\n            body: this.props.idea.body\r\n        };\r\n    }\r\n\r\n    handleInput = (e) => {\r\n        this.props.resetNotification();\r\n        this.setState({[e.target.name]: e.target.value});\r\n        if (e.target.name === \"title\") {\r\n            this.props.sub.send({[e.target.name]: e.target.value, id: this.props.idea.id, \r\n                body: this.state.body});\r\n        }\r\n        else {\r\n            this.props.sub.send({[e.target.name]: e.target.value, id: this.props.idea.id, \r\n                title: this.state.body});\r\n        }\r\n    }\r\n\r\n    handleBlur = () => {\r\n        const idea = {\r\n            title: this.state.title,\r\n            body: this.state.body\r\n        };\r\n\r\n        axios.put(\r\n            `http://production.stipgaimpi.us-west-1.elasticbeanstalk.com/api/v1/ideas/${this.props.idea.id}`,\r\n            {\r\n                idea: idea\r\n            }\r\n        ).then(response => {\r\n            console.log(response);\r\n            this.props.updateIdea(response.data);\r\n        }).catch(error => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tile\">\r\n                <form onBlur={this.handleBlur}>\r\n                    <input className=\"input\" type=\"text\" name=\"title\"\r\n                    placeholder=\"Enter a title\" value={this.state.title}\r\n                    ref={this.props.titleRef} onChange={this.handleInput} />\r\n                    <textarea className=\"input\" name=\"body\"\r\n                    placeholder=\"Describe your idea\" onChange={this.handleInput}\r\n                    value={this.state.body} ></textarea>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IdeaForm;","import React from 'react';\r\nimport axios from 'axios';\r\nimport update from 'immutability-helper';\r\nimport Idea from './Idea';\r\nimport IdeaForm from './IdeaForm';\r\nimport ActionCable from 'actioncable';\r\nimport '../App.css';\r\n\r\n\r\nclass IdeasContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ideas: [],\r\n            editingIdeaId: null\r\n        }\r\n    }\r\n\r\n    addNewIdea = () => {\r\n        axios.post('http://production.stipgaimpi.us-west-1.elasticbeanstalk.com/api/v1/ideas',\r\n            {\r\n                idea: \r\n                {\r\n                    title: '',\r\n                    body: ''\r\n                }\r\n            }\r\n        ).then(response => {\r\n            console.log(response);\r\n            const ideas = update(this.state.ideas, {\r\n                $splice: [[0, 0, response.data]]\r\n            });\r\n            this.setState({\r\n                ideas: ideas,\r\n                editingIdeaId: response.data.id\r\n            });\r\n        }).catch(error => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    updateIdea = (idea) => {\r\n        const ideaIndex = this.state.ideas.findIndex(x => x.id === idea.id)\r\n        const ideas = update(this.state.ideas, {\r\n            [ideaIndex]: { $set: idea }\r\n        })\r\n        this.setState({\r\n            ideas: ideas,\r\n            notification: 'All changes saved'\r\n        })\r\n    }\r\n\r\n    resetNotification = () => {\r\n        this.setState({notification: ''})\r\n    }\r\n\r\n    enableEditing = (id) => {\r\n        this.setState({editingIdeaId: id},\r\n            () => { this.title.focus() \r\n        })\r\n    }\r\n\r\n    deleteIdea = (id) => {\r\n        axios.delete(\r\n            `http://production.stipgaimpi.us-west-1.elasticbeanstalk.com/api/v1/ideas/${id}`\r\n        ).then(response => {\r\n            const ideaIndex = this.state.ideas.findIndex(x => x.id === id)\r\n            const ideas = update(this.state.ideas, { $splice: [[ideaIndex, 1]]})\r\n            this.setState({ideas: ideas})\r\n        }).catch(\r\n            error => {console.log(error)}\r\n        )\r\n    }\r\n\r\n    getIdea = () => {\r\n        axios.get('http://production.stipgaimpi.us-west-1.elasticbeanstalk.com/api/v1/ideas.json').then(response => {\r\n            console.log(response);\r\n            this.setState({ideas: response.data});\r\n        }).catch(error => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    handleReceive = (message) => {\r\n        console.log(message);\r\n        this.getIdea();\r\n    }\r\n\r\n    handleReceiveNewText = ({ text }) => {\r\n        if (text !== this.state.ideas) {\r\n            this.setState({ text })\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getIdea();\r\n\r\n        const cable = ActionCable.createConsumer('ws://production.stipgaimpi.us-west-1.elasticbeanstalk.com/cable');\r\n        this.sub = cable.subscriptions.create('NoteChannel', {\r\n            received: this.handleReceive\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <div className=\"buttonHolder\">\r\n                    <button className=\"newIdeaButton\"\r\n                    onClick={this.addNewIdea} >\r\n                        New Idea\r\n                    </button>\r\n                </div>\r\n                <div className=\"notificationHolder\">\r\n                    <span className=\"notification\">\r\n                        {this.state.notification}\r\n                    </span>\r\n                </div>\r\n                {/* <ActionCableProvider cable={cable}>\r\n                    <ActionCableConsumer channel='Note'\r\n                    onReceived={this.handleReceive}>\r\n                    </ActionCableConsumer>\r\n                </ActionCableProvider> */}\r\n                <div className=\"buttonHolder\">\r\n                    {this.state.ideas.map((idea) => {\r\n                        if(this.state.editingIdeaId === idea.id) {\r\n                            return(<IdeaForm idea={idea} key={idea.id} updateIdea={this.updateIdea} \r\n                            resetNotification={this.resetNotification} sub={this.sub}\r\n                            titleRef= {input => this.title = input} />)\r\n                        } else {\r\n                            return (<Idea idea={idea} key={idea.id} \r\n                            onClick={this.enableEditing} onDelete={this.deleteIdea} />)\r\n                        }\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IdeasContainer;","import React from 'react';\nimport './App.css';\nimport IdeasContainer from './components/IdeasContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Ideaboard\n      </header>\n      <IdeasContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}